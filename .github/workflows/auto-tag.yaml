name: Auto Tag

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  tag:
    permissions:
      contents: write
    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.BN_RELEASER_APP_ID }}
          private-key: ${{ secrets.BN_RELEASER_PRIVATE_KEY }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Determine version bump and create tag
        
        env:
          app-id: ${{ vars.BN_RELEASER_APP_ID }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          bot-uid: ${{ secrets.BOT_UID }}
        run: |
          # Get latest tag or default to v0.0.0
          latest_tag=$(git tag -l "v*" | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          
          # Get commits since last tag
          if [ "$latest_tag" = "v0.0.0" ]; then
            commits=$(git log --pretty=format:"%s" --no-merges)
          else
            commits=$(git log ${latest_tag}..HEAD --pretty=format:"%s" --no-merges)
          fi
          
          # Determine version bump type
          if echo "$commits" | grep -q "BREAKING CHANGE\|!:"; then
            bump_type="major"
          elif echo "$commits" | grep -q "^feat\|^feature"; then
            bump_type="minor"
          elif echo "$commits" | grep -q "^fix\|^docs\|^style\|^refactor\|^test\|^chore\|^perf"; then
            bump_type="patch"
          else
            echo "No conventional commits found - skipping tag creation"
            exit 0
          fi
          
          # Parse and calculate new version
          current_version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$current_version"
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}
          
          case $bump_type in
            major) major=$((major + 1)); minor=0; patch=0 ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            patch) patch=$((patch + 1)) ;;
          esac
          
          new_version="$major.$minor.$patch"
          new_tag="v$new_version"
          
          # Check if tag already exists
          if git tag -l "$new_tag" | grep -q "$new_tag"; then
            echo "Tag $new_tag already exists - skipping"
            exit 0
          fi
          


          echo "Bumping $bump_type version: $latest_tag → $new_tag"
          gh config set prompt disabled
          gh auth setup-git
          git config --global user.email "$bot-uid+bn-releaser[bot]@users.noreply.github.com"
          git config --global user.name "bn-releaser[bot]"

          # Update pyproject.toml if it exists
          if [ -f "pyproject.toml" ] && grep -q 'version = ' pyproject.toml; then
            # Check current version in file
            current_file_version=$(grep 'version = ' pyproject.toml | sed 's/.*version = "\([^"]*\)".*/\1/')
            
            if [ "$current_file_version" != "$new_version" ]; then
              sed -i.bak "s/version = \".*\"/version = \"$new_version\"/" pyproject.toml
              rm -f pyproject.toml.bak  # Clean up backup file
              
              git add pyproject.toml
              git commit -m "chore: bump version to $new_version [skip ci]"
              git push origin main
              echo "Updated pyproject.toml version: $current_file_version → $new_version"
            else
              echo "pyproject.toml already has version $new_version"
            fi
          fi
          
          # Create and push tag
          git tag -a "$new_tag" -m "Release $new_tag"
          git push origin --tags
          echo "Created and pushed tag: $new_tag"
